(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/ian/web2py/applications/grades/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\nif 0:\n    from gluon import current, SQLFORM, redirect, A, URL, IS_IN_DB\n    from gluon.tools import Auth, Crud\n    from gluon.dal import DAL\n    db = DAL()\n    auth = Auth()\n    response = current.response\n    service = current.service\n    request = current.request\n    session = current.session\n    crud = Crud()\n    \nimport datetime\n\n### required - do no delete\ndef user(): \n    courses = db(db.courses.id > 0).select()\n    courselist = []\n    for c in courses:\n        try:\n            gradelist = db((db.grades.name == auth.user_id) & (db.grades.course == c.id)).select()\n            s=db.grades.grade.sum()\n            row = db(db.grades.name == auth.user_id).select(s).first()\n            av = row[s]\n            avg = round(av/len(gradelist))           \n            curve = c.curve\n            if curve == None:\n                curve = 0\n            avg += curve\n            \n            this_c = {c.course_name:avg}\n            courselist.append(this_c)\n        except:\n            pass\n            \n    return dict(form=auth(), courselist = courselist)\n\ndef download(): return response.download(request,db)\n\ndef call(): return service()\n### end required\n\ndef index():\n    courses = db(db.courses.id > 0).select()\n    return dict(courses = courses)\n\ndef error():\n    return dict()\n\n@auth.requires_membership(role=\'administrators\')\ndef grades_manage():\n    form = SQLFORM.smartgrid(db.grades,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_membership(role=\'administrators\')\ndef classes_manage():\n    form = SQLFORM.smartgrid(db.courses,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef create_grade():\n    """\n    TODO: Make sure these fields are all required. \n    TODO: Restrict names in drop-down to students in current course\n    TODO: Remove logged-in student from name drop-down\n    """\n    c = \'\'\n    if request.args:\n        c = db.courses[request.args[0]]\n    else:\n        redirect(URL(\'index\'))\n    cname = c.course_name\n    cnum = c.id\n    m = str(c.max_score)\n    if m == \'None\':\n        m = \'4\'\n    form = SQLFORM(\n        db.grades, separator=\'\', \n        fields=[\'name\', \'grade\', \'class_date\'], \n        labels={\'name\':"student\'s name", \'grade\':"grade", \'class_date\':\'class date\'}, \n        col3={\'name\':\'The student to receive the grade.\', \'grade\':\'a number out of \'+m, \'class_date\':"the date when the class took place"},\n        submit_button = \'assign this grade\'\n        )\n    form.vars.course = cnum \n    db.grades.name.requires=IS_IN_DB(db(db.grades.course == request.args[0]), \'grades.name\', \'%(name)s\' ) \n    if form.process().accepted:\n        response.flash = \'Thanks! The grade was recorded.\'\n    the_user = db(db.auth_user.id == auth.user_id).select().first()\n    fn = the_user.first_name\n    cancel_button = A(\'cancel\', _href=URL(\'index\'), _class=\'cancel\')\n    return dict(form = form, cancel_button = cancel_button, fn = fn, cname = cname)\n\n@auth.requires_membership(role=\'administrators\')\ndef grades_report():\n    student_list = db(db.auth_user.id > 0).select()\n    students = {}\n    for s in student_list:\n        sindex = s.id\n        slast = s.last_name\n        sfirst = s.first_name\n        students[sindex] = slast + \', \' + sfirst\n    \n    courses = db(db.courses.id > 0).select()\n    d = {}\n    for c in courses:\n        l = []\n        for k,s in students.items():\n            if db(db.grades.course == c & db.grades.student == k):\n                l = append(k)\n        d[c] = l\n    \n    return dict(students = students, courses = d)\n\ndef grades_detail():\n    u = request.args[0]\n    n = db.auth_user[u]\n    student = n.last_name + \', \' + n.first_name\n    \n    courses = db(db.courses.id > 0).select()\n    courselist = []\n    for c in courses:\n        try:\n            gradelist = db((db.grades.name == u) & (db.grades.course == c.id)).select()\n            s=db.grades.grade.sum()\n            row = db(db.grades.name == u).select(s).first()\n            av = row[s]\n            avg = round((av/len(gradelist)), 3)           \n            curve = c.curve\n            if curve == None:\n                curve = 0\n            avg += curve\n            \n            this_c = {c.course_name:avg}\n            courselist.append(this_c)\n        except:\n            print \'\'\n    \n    return dict(courselist = courselist, student=student)                \nresponse._vars=response._caller(grades_report)\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/home/ian/web2py/gluon/restricted.py", line 194, in restricted\n    exec ccode in environment\n  File "/home/ian/web2py/applications/grades/controllers/default.py", line 140, in <module>\n  File "/home/ian/web2py/gluon/globals.py", line 149, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ian/web2py/gluon/tools.py", line 2456, in f\n    return action(*a, **b)\n  File "/home/ian/web2py/applications/grades/controllers/default.py", line 109, in grades_report\n    if db(db.grades.course == c & db.grades.student == k):\n  File "/home/ian/web2py/gluon/dal.py", line 4921, in __getattr__\n    return self[key]\n  File "/home/ian/web2py/gluon/dal.py", line 4865, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'student\'\n'
p10
s.